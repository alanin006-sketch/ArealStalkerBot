from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
import json
import os
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
from bot.handlers import start

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
application = None

def setup_bot():
    global application
    if application is None:
        token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not token:
            print("‚ùå TELEGRAM_BOT_TOKEN not set!")
            return None
            
        print("‚úÖ Initializing bot application...")
        application = Application.builder().token(token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        application.add_handler(CommandHandler("start", start))
        
        print("‚úÖ Bot setup completed")
    
    return application

@csrf_exempt
def webhook(request):
    if request.method == 'POST':
        try:
            # –ü–∞—Ä—Å–∏–º –≤—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            data = json.loads(request.body)
            print("üì® Received Telegram update")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            app = setup_bot()
            if app is None:
                return JsonResponse({'status': 'error', 'message': 'Bot not configured'})
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update
            update = Update.de_json(data, app.bot)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ run_until_complete
            async def process_update():
                async with app:
                    await app.process_update(update)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            if app.running:
                asyncio.create_task(process_update())
            else:
                asyncio.run(process_update())
            
            print("‚úÖ Update processed successfully")
            return JsonResponse({'status': 'ok'})
            
        except Exception as e:
            print("‚ùå Error in webhook:", str(e))
            import traceback
            print("Full traceback:", traceback.format_exc())
            return JsonResponse({'status': 'error', 'message': str(e)})
    
    return JsonResponse({'error': 'Method not allowed'}, status=405)
