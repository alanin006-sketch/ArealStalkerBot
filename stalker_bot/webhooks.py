from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
import json
import os
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler

# –ö—ç—à –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
_bot_app = None

def get_bot_application():
    global _bot_app
    if _bot_app is None:
        token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not token:
            raise ValueError("TELEGRAM_BOT_TOKEN not set")
        
        _bot_app = Application.builder().token(token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        from bot.handlers import start
        _bot_app.add_handler(CommandHandler("start", start))
        
    return _bot_app

@csrf_exempt
def webhook(request):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            print("üì® Received Telegram update")
            
            app = get_bot_application()
            update = Update.de_json(data, app.bot)
            
            # –ü—Ä–æ—Å—Ç–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            async def handle_update():
                await app.initialize()
                await app.process_update(update)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            asyncio.run(handle_update())
            
            print("‚úÖ Update processed")
            return JsonResponse({'status': 'ok'})
            
        except Exception as e:
            print(f"‚ùå Error: {e}")
            return JsonResponse({'status': 'error', 'message': str(e)})
    
    return JsonResponse({'error': 'Method not allowed'}, status=405)
