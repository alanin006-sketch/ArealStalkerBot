from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler
import os
import json
import asyncio

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
from bot.handlers import start, explore_city, go_to_bar, order_beer, ask_about_zone, show_status, show_inventory, cancel
from bot.states import ARRIVAL, BAR_CHOICE
from bot.keyboards import get_main_keyboard

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
application = None

def setup_bot():
    global application
    if application is None:
        token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not token:
            print("‚ùå TELEGRAM_BOT_TOKEN not set!")
            return None
            
        application = Application.builder().token(token).build()
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
        from bot.states import ARRIVAL, BAR_CHOICE
        
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', start)],
            states={
                ARRIVAL: [
                    MessageHandler(filters.Regex('üë£ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥'), explore_city),
                    MessageHandler(filters.Regex('üçª –ù–∞–π—Ç–∏ –±–∞—Ä'), go_to_bar),
                    MessageHandler(filters.Regex('üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å'), show_status),
                    MessageHandler(filters.Regex('üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å'), show_inventory),
                ],
                BAR_CHOICE: [
                    MessageHandler(filters.Regex('üç∫ –ó–∞–∫–∞–∑–∞—Ç—å –ø–∏–≤–æ'), order_beer),
                    MessageHandler(filters.Regex('üëÇ –†–∞—Å—Å–ø—Ä–æ—Å–∏—Ç—å –æ –ó–æ–Ω–µ'), ask_about_zone),
                    MessageHandler(filters.Regex('‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ –±–∞—Ä–∞'), cancel),
                ],
            },
            fallbacks=[CommandHandler('cancel', cancel)]
        )
        
        application.add_handler(conv_handler)
        application.initialize()
        print("‚úÖ Bot application setup completed")
    
    return application

@csrf_exempt
def webhook(request):
    if request.method == 'POST':
        try:
            # –ü–∞—Ä—Å–∏–º –≤—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            data = json.loads(request.body)
            print("üì® Received update:", data)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            app = setup_bot()
            if app is None:
                return JsonResponse({'status': 'error', 'message': 'Bot not configured'})
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update
            update = Update.de_json(data, app.bot)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            async def process_update():
                await app.process_update(update)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            asyncio.run(process_update())
            
            print("‚úÖ Update processed successfully")
            return JsonResponse({'status': 'ok'})
            
        except Exception as e:
            print("‚ùå Error in webhook:", str(e))
            return JsonResponse({'status': 'error', 'message': str(e)})
    
    return JsonResponse({'error': 'Method not allowed'}, status=405)
